import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.*;

/**
 * <h1>üìÑ LogManagerSetup</h1>
 * <p><strong>Configuration centralis√©e du syst√®me de log pour une application Java Swing.</strong></p>
 *
 * <h2>‚öôÔ∏è Fonctionnalit√©s</h2>
 * <ul>
 *   <li>Cr√©ation automatique du dossier <code>.log/</code> dans le r√©pertoire courant.</li>
 *   <li>G√©n√©ration d‚Äôun fichier de log par jour : <code>.log/yyyy-MM-dd.log</code>.</li>
 *   <li>√âcriture des messages de log dans ce fichier selon le niveau d√©fini.</li>
 *   <li>Affichage dans la console avec un niveau distinct (param√©trable).</li>
 *   <li>Formatage simple et lisible via <code>SimpleFormatter</code>.</li>
 * </ul>
 *
 * <h2>üõ†Ô∏è Utilisation</h2>
 * <p>
 * Appeler une seule fois au lancement de l'application (dans la m√©thode <code>main()</code>) :
 * </p>
 * <pre>
 *   LogManagerSetup.setupLogger(Level.INFO, Level.ALL);
 * </pre>
 *
 * <p>
 * Ensuite, dans toutes les autres classes, il suffit d'utiliser :
 * </p>
 * <pre>
 *   private static final Logger logger = Logger.getLogger(NomDeClasse.class.getName());
 * </pre>
 *
 * <p>Tous les loggers configur√©s de cette mani√®re utiliseront la m√™me configuration (fichier + console).</p>
 *
 * <h2>üß† Note importante ‚Äî hi√©rarchie des loggers</h2>
 * <p>
 * Le syst√®me <code>java.util.logging</code> fonctionne avec une hi√©rarchie de noms :
 * </p>
 * <pre>
 *   Logger.getLogger("com.example.MaClasse")
 *     ‚Üí parent = Logger.getLogger("com.example")
 *     ‚Üí parent = Logger.getLogger("com")
 *     ‚Üí parent = Logger.getLogger("")
 * </pre>
 *
 * <p>
 * Tous les loggers transmettent leurs messages √† leur parent jusqu'au <strong>logger racine</strong> (<code>""</code>).
 * Si on configure uniquement ce logger racine, tous les autres loggers en h√©riteront automatiquement :
 * </p>
 *
 * <ul>
 *   <li>Pas besoin de configurer chaque logger manuellement.</li>
 *   <li>Centralisation de la gestion des logs (console et fichier).</li>
 * </ul>
 *
 * <hr>
 * <p style="color:gray;"><em>Con√ßu pour des projets Swing mais r√©utilisable dans tout projet Java.</em></p>
 */

public class LogManagerSetup {

    /**
     * Configure le syst√®me de log :
     * @param consoleLevel Niveau de log √† afficher dans la console (ex: Level.INFO)
     * @param fileLevel Niveau de log √† enregistrer dans le fichier (ex: Level.ALL)
     */
    public static void setupLogger(Level consoleLevel, Level fileLevel) {
        try {
            // 1. Cr√©er le dossier .log s‚Äôil n‚Äôexiste pas
            File logDir = new File(".log");
            if (!logDir.exists()) {
                logDir.mkdirs();
            }

            // 2. G√©n√©rer un nom de fichier avec la date du jour (ex: .log/2025-05-04.log)
            String dateStr = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
            String logFilePath = ".log/" + dateStr + ".log";

            // 3. Cr√©er un FileHandler pour le fichier log
            FileHandler fileHandler = new FileHandler(logFilePath, true); // append = true
            fileHandler.setFormatter(new SimpleFormatter());
            fileHandler.setLevel(fileLevel);

            // 4. Cr√©er un ConsoleHandler avec son propre niveau
            ConsoleHandler consoleHandler = new ConsoleHandler();
            consoleHandler.setFormatter(new SimpleFormatter());
            consoleHandler.setLevel(consoleLevel);

            // 5. Obtenir le logger global (root)
            Logger rootLogger = Logger.getLogger("");
            rootLogger.setLevel(Level.ALL); // On capte tout
            // Supprimer les handlers existants pour √©viter les doublons
            Handler[] handlers = rootLogger.getHandlers();
            for (Handler h : handlers) {
                rootLogger.removeHandler(h);
            }

            // 6. Ajouter les nouveaux handlers
            rootLogger.addHandler(fileHandler);
            rootLogger.addHandler(consoleHandler);

        } catch (IOException e) {
            Logger.getAnonymousLogger().log(Level.SEVERE, "Erreur de configuration du log", e);
        }
    }
}
